package hbv;
import java.util.*;
import java.sql.*;


public class MyStatementWrapper implements Statement {
	private Statement org;
	public MyStatementWrapper(Statement org){
		this.org=org;
	}

	public void addBatch(String sql) throws SQLException {
		org.addBatch(sql);
	}
	public void cancel() throws SQLException {
		org.cancel();
	}
	public void clearBatch() throws SQLException {
		org.clearBatch();
	}
	public void clearWarnings() throws SQLException {
		org.clearWarnings();
	}
	public void close() throws SQLException {
		org.close();
	}
	public void closeOnCompletion() throws SQLException {
		org.closeOnCompletion();
	}
	public boolean execute(String sql) throws SQLException {
		return org.execute(sql);
	}
	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
		return org.execute(sql,autoGeneratedKeys);
	}
	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		return org.execute(sql,columnIndexes);
	}
	public boolean execute(String sql, String[] columnNames) throws SQLException {
		return org.execute(sql,columnNames);
	}
	public int[] executeBatch() throws SQLException{
		return org.executeBatch();
	}
	public ResultSet executeQuery(String sql) throws SQLException {
	//	MyLogger.info("executeQuery:"+this);
		return org.executeQuery(sql);
	}
	public int executeUpdate(String sql) throws SQLException {
		return org.executeUpdate(sql);
	}
	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		return org.executeUpdate(sql,autoGeneratedKeys);
	}
	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
		return org.executeUpdate(sql,columnIndexes);
	}
	public int executeUpdate(String sql, String[] columnNames) throws SQLException {
		return org.executeUpdate(sql,columnNames);
	}
	public Connection getConnection() throws SQLException {
		return org.getConnection();
	}
	public int getFetchDirection() throws SQLException {
		return org.getFetchDirection();
	}
	public int getFetchSize() throws SQLException {
		return org.getFetchSize();
	}
	public ResultSet getGeneratedKeys() throws SQLException {
		return org.getGeneratedKeys();
	}
	public int getMaxFieldSize() throws SQLException {
		return org.getMaxFieldSize();
	}
	public int getMaxRows() throws SQLException {
		return org.getMaxRows();
	}
	public boolean getMoreResults() throws SQLException {
		return org.getMoreResults();
	}
	public boolean getMoreResults(int current) throws SQLException {
		return org.getMoreResults(current);
	}
	public int getQueryTimeout() throws SQLException {
		return org.getQueryTimeout();
	}

	public ResultSet getResultSet() throws SQLException {
		return org.getResultSet();
	}

	public int getResultSetConcurrency() throws SQLException {
		return org.getResultSetConcurrency();
	}
	public int getResultSetHoldability() throws SQLException {
		return org.getResultSetHoldability();
	}
	public int getResultSetType() throws SQLException {
		return org.getResultSetType();
	}

	public int getUpdateCount() throws SQLException {
		return org.getUpdateCount();
	}
	public SQLWarning getWarnings() throws SQLException {
		return org.getWarnings();
	}
	public boolean isClosed() throws SQLException {
		return org.isClosed();
	}
	public boolean isCloseOnCompletion() throws SQLException {
		return org.isCloseOnCompletion();
	}

	public boolean isPoolable() throws SQLException {
		return org.isPoolable();
	}
	public void setCursorName(String name) throws SQLException {
		org.setCursorName(name);
	}
	public void setEscapeProcessing(boolean enable) throws SQLException {
		org.setEscapeProcessing(enable);
	}

	public void setFetchDirection(int direction) throws SQLException {
		org.setFetchDirection(direction);
	}

	public void setFetchSize(int rows) throws SQLException {
		org.setFetchSize(rows);
	}

	public void setMaxFieldSize(int max) throws SQLException {
		org.setMaxFieldSize(max);
	}

	public void setMaxRows(int max) throws SQLException {
		org.setMaxRows(max);
	}

	public void setPoolable(boolean poolable) throws SQLException {
		org.setPoolable(poolable);
	}
	public void setQueryTimeout(int seconds) throws SQLException {
		org.setQueryTimeout(seconds);
	}
	public <T> T unwrap(final Class<T> iface) throws SQLException {
		return org.unwrap(iface);
	}
	public boolean isWrapperFor(final Class<?> interfaceOrWrapper) 
			throws SQLException {
			return org.isWrapperFor(interfaceOrWrapper);
	}

}


package hbv;

import java.util.*;
import java.sql.*;
import java.util.concurrent.*;


public class MyConnectionWrapper implements Connection {
	private Connection org;
	public MyConnectionWrapper(Connection org){
		this.org=org;
	}
	//to override
	public MyStatementWrapper createMyStatementWrapper(Statement stmt){
		return new MyStatementWrapper(stmt);
	}
	public MyPreparedStatementWrapper createMyPreparedStatementWrapper(String sql,PreparedStatement stmt){
		return new MyPreparedStatementWrapper(sql,stmt);
	}

	public Statement createStatement() throws SQLException {
		return createMyStatementWrapper(org.createStatement());
	}
	public Statement createStatement(int resultSetType, 
			int resultSetConcurrency) 
			throws SQLException{
		return createMyStatementWrapper(org.createStatement(resultSetType,resultSetConcurrency));
	}
	public Statement createStatement(int resultSetType, 
			int resultSetConcurrency, 
			int resultSetHoldability) throws SQLException{
		return createMyStatementWrapper(org.createStatement(resultSetType,resultSetConcurrency,resultSetHoldability));
	}
	public CallableStatement prepareCall(String sql) throws SQLException {
		return org.prepareCall(sql);
	}
	public CallableStatement prepareCall(String sql, 
			int resultSetType, 
			int resultSetConcurrency) throws SQLException {
		return org.prepareCall(sql,resultSetType,resultSetConcurrency);
	}
	public CallableStatement prepareCall(String sql, 
			int resultSetType, 
			int resultSetConcurrency, int resultSetHoldability) throws SQLException {
		return org.prepareCall(sql,resultSetType,resultSetConcurrency,resultSetHoldability);
	}
	public String nativeSQL(String sql) throws SQLException {
		return org.nativeSQL(sql);
	}
	public void setAutoCommit(boolean autoCommit) throws SQLException {
		org.setAutoCommit(autoCommit);
	}
	public boolean getAutoCommit() throws SQLException {
		return org.getAutoCommit();
	}
	public void commit() throws SQLException {
		org.commit();
	}
	public void rollback() throws SQLException {
		org.rollback();
	}
	public void close() throws SQLException {
		org.close();
	}
	public boolean isClosed() throws SQLException {
		return org.isClosed();
	}
	public DatabaseMetaData getMetaData() throws SQLException {
		return org.getMetaData();
	}
	public void setReadOnly(boolean readOnly) throws SQLException {
		org.setReadOnly(readOnly);
	}
	public boolean isReadOnly() throws SQLException {
		return org.isReadOnly();
	}
	public void setCatalog(String catalog) throws SQLException {
		org.setCatalog(catalog);
	}
	public String getCatalog() throws SQLException {
		return org.getCatalog();
	}
	public void setTransactionIsolation(int level) throws SQLException {
		org.setTransactionIsolation(level);
	}
	public int getTransactionIsolation() throws SQLException {
		return org.getTransactionIsolation();
	}

	public SQLWarning getWarnings() throws SQLException {
		return org.getWarnings();
	}
	public void clearWarnings() throws SQLException {
		org.clearWarnings();
	}
	public PreparedStatement prepareStatement(String sql) throws SQLException {
		return createMyPreparedStatementWrapper(sql,org.prepareStatement(sql));
	}
	public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) 
			throws SQLException {
		return createMyPreparedStatementWrapper(sql,org.prepareStatement(sql,autoGeneratedKeys));
	}
	public PreparedStatement prepareStatement(String sql, int[] columnIndexes) 
			throws SQLException {
		return createMyPreparedStatementWrapper(sql,org.prepareStatement(sql,columnIndexes));
	}

	public PreparedStatement prepareStatement(String sql, int resultSetType, 
			int resultSetConcurrency) throws SQLException {
		return createMyPreparedStatementWrapper(sql,org.prepareStatement(sql,resultSetType,resultSetConcurrency));
	}
	public PreparedStatement prepareStatement(String sql, int resultSetType, 
			int resultSetConcurrency, int resultSetHoldability) throws SQLException {
		return createMyPreparedStatementWrapper(sql,org.prepareStatement(sql,resultSetType,resultSetConcurrency,resultSetHoldability));
	}
	public PreparedStatement prepareStatement(String sql, String[] columnNames) 
			throws SQLException {
		return createMyPreparedStatementWrapper(sql,org.prepareStatement(sql,columnNames));
	}
	public Map<String,Class<?>> getTypeMap()throws SQLException {
		return org.getTypeMap();
	}
	public void setTypeMap(Map<String,Class<?>> map) throws SQLException {
		org.setTypeMap(map);
	}
	public void setHoldability(int holdability) throws SQLException {
		org.setHoldability(holdability);
	}
	public int getHoldability() throws SQLException {
		return org.getHoldability();
	}
	public Savepoint setSavepoint() throws SQLException {
		return org.setSavepoint();
	}
	public Savepoint setSavepoint(String name) throws SQLException {
		return org.setSavepoint(name);
	}
	public void rollback(Savepoint savepoint) throws SQLException {
		org.rollback(savepoint);
	}
	public void releaseSavepoint(Savepoint savepoint) throws SQLException {
		org.releaseSavepoint(savepoint);
	}
	public Blob createBlob() throws SQLException {
		return org.createBlob();
	}
	public Clob createClob() throws SQLException {
		return org.createClob();
	}
	public NClob createNClob() throws SQLException {
		return org.createNClob();
	}
	public SQLXML createSQLXML() throws SQLException {
		return org.createSQLXML();
	}
	public boolean isValid(int timeout) throws SQLException {
		return org.isValid(timeout);
	}
	public void setClientInfo(String name, String value) 
			throws SQLClientInfoException {
		org.setClientInfo(name,value);
	}
	public void setClientInfo(Properties properties) 
			throws SQLClientInfoException {
		org.setClientInfo(properties);
	}
	public Properties getClientInfo() throws SQLException{
		return org.getClientInfo();
	}
	public String getClientInfo(String name) throws SQLException {
		return org.getClientInfo(name);
	}
	public Array createArrayOf(String typeName, Object[] elements) 
			throws SQLException {
		return org.createArrayOf(typeName,elements);
	}
	public Struct createStruct(String typeName, Object[] attributes) 
			throws SQLException {
		return org.createStruct(typeName,attributes);
	}
	public String getSchema() throws SQLException {
		return org.getSchema();
	}
	public void setSchema(String schema) throws SQLException {
		org.setSchema(schema);
	}
	public void abort(Executor executor) throws SQLException {
		org.abort(executor);
	}
	public void setNetworkTimeout(Executor executor, int milliseconds) 
			throws SQLException {
		org.setNetworkTimeout(executor,milliseconds);
	}

	public int getNetworkTimeout() throws SQLException {
		return org.getNetworkTimeout();
	}
	public <T> T unwrap(final Class<T> iface) throws SQLException {
		return org.unwrap(iface);
	}
	public boolean isWrapperFor(final Class<?> interfaceOrWrapper) 
			throws SQLException {
		return org.isWrapperFor(interfaceOrWrapper);
	}

}
